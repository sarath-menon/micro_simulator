#pragma once
#include "motor.h"

/// Represents the swinging arm
class MotorPropellerPair : public Motor {

private:
public:
  /// Loads the arm properties from the yaml file
  // BldcMotor(std::string parameter_path);

  // By default, everything is initialized to zero
protected:
  // Position and Orientation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  /// Time constant of the bldc motor.
  float time_constant_ = 0;

  // Variables for dynamics function ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  /// Thrust generated by the motor propellor pair
  float actual_thrust_ = 0;

  /// Rate of change of thrust for the motor propellor pair
  float actual_thrust_dot_ = 0;

  /// Maximum thrust produced by propeller
  float thrust_max_ = 0;

  // Minimum m thrust produced by propeller
  float thrust_min_ = 0;

public:
  /// Arm Dynamics
  void Dynamics(const float &commanded_motor_speed);

public:
  /// Getter function
  float time_constant() const { return time_constant_; }

  /// Getter function
  float actual_thrust() const { return actual_thrust_; }

  /// Getter function
  float actual_thrust_dot() const { return actual_thrust_dot_; }

  /// Getter function
  const float thrust_max() const { return thrust_max_; }

  /// Getter function
  const float thrust_min() const { return thrust_min_; }

public:
  /// Setter function
  void set_time_constant(float time_constant) {
    time_constant_ = time_constant;
  }

  /// Setter function
  void set_thrust_max(float thrust_max) { thrust_max_ = thrust_max; }

  /// Setter function
  void set_thrust_min(float thrust_min) { thrust_min_ = thrust_min; }
};